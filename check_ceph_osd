#!/usr/bin/env python
#
#  Copyright (c) 2017 Jan Krcmar (honza801@gmail.com)
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

import sys
import argparse
import urllib2
import base64
import json
import logging

__version__ = '0.0.1'

# nagios exit code
STATUS_OK = 0
STATUS_WARNING = 1
STATUS_ERROR = 2
STATUS_UNKNOWN = 3

logging.basicConfig(level=logging.INFO)

def main():

  # parse args
  parser = argparse.ArgumentParser(description="ceph osd nagios plugin.")
  parser.add_argument('-a','--address', help='mgr address to use for queries')
  parser.add_argument('-p','--port', help='mgr port to use for queries', default=8003)
  parser.add_argument('-V','--version', help='show version and exit', action='store_true')
  parser.add_argument('-I','--osdid', help='osd ID to be checked for availability')
  parser.add_argument('-u','--user', help='ceph restful user', default='nagios')
  parser.add_argument('-w','--password', help='ceph restful user')
  parser.add_argument('-r','--urlprefix', help='ceph restful url prefix', default='')
  args = parser.parse_args()
  
  if args.version:
    print 'version %s' % __version__
    return STATUS_OK

  # validate args
  if not args.address:
    print "Please specify mgr address for '%s' user with -a/--address parameter" % args.user
    return STATUS_UNKNOWN

  if not args.password:
    print "Please specify password for '%s' user with -w/--password parameter" % args.user
    return STATUS_UNKNOWN

  # build url
  url = 'https://%s:%s%s/osd' % (args.address, args.port, args.urlprefix)
  if args.osdid:
    url += '/%s' % args.osdid
  logging.debug(url)
  
  # get status
  request = urllib2.Request(url)
  base64string = base64.b64encode('%s:%s' % (args.user, args.password))
  request.add_header("Authorization", "Basic %s" % base64string)   
  try:
    response = urllib2.urlopen(request)
  except Exception as e:
    print "OSD ERROR: could not get response from '%s': %s" % (url, e)
    return STATUS_UNKNOWN

  try:
    status = json.loads(response.read())
  except Exception as e:
    print "OSD ERROR: could not parse status output: %s: %s" % (status, e)
    return STATUS_UNKNOWN

  # do our checks
  if args.osdid:
    status = [status]
  
  logging.debug(status)

  broken_osds = [ osd['osd'] for osd in status if osd['in'] == 0 or osd['up'] == 0 ]

  if broken_osds:
    print "OSD ERR: some OSDs not in quorum: %s" % ','.join(broken_osds)
    return STATUS_ERROR
  else:
    print "OSD OK"
    return STATUS_OK

# main
if __name__ == "__main__":
  sys.exit(main())

